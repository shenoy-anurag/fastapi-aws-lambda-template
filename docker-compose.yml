services:
  # db:
  #   image: postgres:17-alpine
  #   restart: no
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s
  #     timeout: 10s
  #   # ports:
  #   #   - 5432:5432 # Only for alembic migrations locally. Remove when deploying.
  #   volumes:
  #     - app-db-data:/var/lib/postgresql/data/pgdata
  #   env_file:
  #     - .env
  #   environment:
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   networks:
  #     - default

  # adminer:
  #   image: adminer
  #   restart: no
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - default

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - 8000:8000
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - FIRST_SUPERUSER_FIRST_NAME=${FIRST_SUPERUSER_FIRST_NAME}
      - FIRST_SUPERUSER_LAST_NAME=${FIRST_SUPERUSER_LAST_NAME}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - default
    # depends_on:
    #   db:
    #     condition: service_healthy

volumes:
  app-db-data:
